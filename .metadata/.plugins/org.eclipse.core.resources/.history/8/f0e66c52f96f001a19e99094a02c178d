package com.revature.repository;

import java.sql.Blob;

import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Timestamp;
import java.sql.Types;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.sql.Date;
import java.util.List;

import com.revature.instances.Reimbursement;
import com.revature.instances.Type;
import com.revature.instances.Status;
import com.revature.util.ConnectionUtil;
import com.revature.util.LoggerUtil;

public class ReimbursementDAOImpl implements ReimbursementDAO {

	public List<Reimbursement> findAll() {
		List<Reimbursement> list = new ArrayList<>();

		try (Connection conn = ConnectionUtil.getConnection()) {
			String sql = "SELECT * FROM ERS_REIMBURSEMENTS " + 
				    "JOIN ERS_REIMBURSEMENT_STATUS ERS ON ERS_REIMBURSEMENTS.REIMB_STATUS_ID = ERS.REIMB_STATUS_ID " +
				    "JOIN ERS_REIMBURSEMENT_TYPE ERT ON ERS_REIMBURSEMENTS.REIMB_TYPE_ID = ERT.REIMB_TYPE_ID";
			
			Statement stmt = conn.createStatement();
			
			ResultSet rs = stmt.executeQuery(sql);
			
			while(rs.next()) {
				int id = rs.getInt("REIMB_ID");
				int amount = rs.getInt("REIMB_AMOUNT");
				String submitted = rs.getTimestamp("REIMB_SUBMITTED").toString();
				String resolved = null;
				rs.getTimestamp("REIMB_RESOLVED");
				if(!rs.wasNull()) {
					resolved = rs.getTimestamp("REIMB_RESOLVED").toString();
				}
				String description = rs.getString("REIMB_DESCRIPTION");
				Blob receipt = rs.getBlob("REIMB_RECEIPT");
				int author = rs.getInt("REIMB_AUTHOR");
				int resolver = rs.getInt("REIMB_RESOLVER");
				Status status = null;
				switch(rs.getInt("REIMB_STATUS_ID")) {
				case 1:
					status = Status.PENDING;
					break;
				case 2:
					status = Status.APPROVED;
					break;
				case 3:
					status = Status.DENIED;
					break;
				}
				Type type = null;
				switch(rs.getInt("REIMB_TYPE_ID")) {
				case 1:
					type = Type.LODGING;
					break;
				case 2:
					type = Type.TRAVEL;
					break;
				case 3:
					type = Type.FOOD;
					break;
				case 4:
					type = Type.OTHER;
					break;
				}
				list.add(new Reimbursement(id, amount, submitted, resolved, description, receipt, author, resolver, status, type));
				}
			stmt.close();
		} catch (SQLException e) {
			System.out.println(e);
			LoggerUtil.log.info("SQL Exception in UserDaoImpl");
		}
		
		return list;		
	}

	public List<Reimbursement> findByPending() {
		List<Reimbursement> list = new ArrayList<>();
		
		try (Connection conn = ConnectionUtil.getConnection()) {
			String sql = "SELECT * FROM ERS_REIMBURSEMENTS " + 
				    "JOIN ERS_REIMBURSEMENT_STATUS ERS ON ERS_REIMBURSEMENTS.REIMB_STATUS_ID = ERS.REIMB_STATUS_ID " +
				    "JOIN ERS_REIMBURSEMENT_TYPE ERT ON ERS_REIMBURSEMENTS.REIMB_TYPE_ID = ERT.REIMB_TYPE_ID "
				    + "WHERE REIMB_STATUS = 'PENDING'";
			
			Statement stmt = conn.createStatement();
			
			ResultSet rs = stmt.executeQuery(sql);
			
			while(rs.next()) {
				int id = rs.getInt("REIMB_ID");
				int amount = rs.getInt("REIMB_AMOUNT");
				String submitted = rs.getTimestamp("REIMB_SUBMITTED").toString();
				String resolved = null;
				rs.getTimestamp("REIMB_RESOLVED");
				if(!rs.wasNull()) {
					resolved = rs.getTimestamp("REIMB_RESOLVED").toString();
				}
				String description = rs.getString("REIMB_DESCRIPTION");
				Blob receipt = rs.getBlob("REIMB_RECEIPT");
				int author = rs.getInt("REIMB_AUTHOR");
				int resolver = rs.getInt("REIMB_RESOLVER");
				Status status = null;
				switch(rs.getInt("REIMB_STATUS_ID")) {
				case 1:
					status = Status.PENDING;
					break;
				case 2:
					status = Status.APPROVED;
					break;
				case 3:
					status = Status.DENIED;
					break;
				}
				Type type = null;
				switch(rs.getInt("REIMB_TYPE_ID")) {
				case 1:
					type = Type.LODGING;
					break;
				case 2:
					type = Type.TRAVEL;
					break;
				case 3:
					type = Type.FOOD;
					break;
				case 4:
					type = Type.OTHER;
					break;
				}
				list.add(new Reimbursement(id, amount, submitted, resolved, description, receipt, author, resolver, status, type));
				}
			stmt.close();
		} catch (SQLException e) {
			System.out.println(e);
			LoggerUtil.log.info("SQL Exception in UserDaoImpl");
		}
		
		return list;
	}

	public List<Reimbursement> findByApproved() {
		List<Reimbursement> list = new ArrayList<>();
		
		try (Connection conn = ConnectionUtil.getConnection()) {
			String sql = "SELECT * FROM ERS_REIMBURSEMENTS " + 
				    "JOIN ERS_REIMBURSEMENT_STATUS ERS ON ERS_REIMBURSEMENTS.REIMB_STATUS_ID = ERS.REIMB_STATUS_ID " +
				    "JOIN ERS_REIMBURSEMENT_TYPE ERT ON ERS_REIMBURSEMENTS.REIMB_TYPE_ID = ERT.REIMB_TYPE_ID "
				    + "WHERE REIMB_STATUS = 'APPROVED'";
			
			Statement stmt = conn.createStatement();
			
			ResultSet rs = stmt.executeQuery(sql);
			
			while(rs.next()) {
				int id = rs.getInt("REIMB_ID");
				int amount = rs.getInt("REIMB_AMOUNT");
				String submitted = rs.getTimestamp("REIMB_SUBMITTED").toString();
				String resolved = null;
				rs.getTimestamp("REIMB_RESOLVED");
				if(!rs.wasNull()) {
					resolved = rs.getTimestamp("REIMB_RESOLVED").toString();
				}
				String description = rs.getString("REIMB_DESCRIPTION");
				Blob receipt = rs.getBlob("REIMB_RECEIPT");
				int author = rs.getInt("REIMB_AUTHOR");
				int resolver = rs.getInt("REIMB_RESOLVER");
				Status status = null;
				switch(rs.getInt("REIMB_STATUS_ID")) {
				case 1:
					status = Status.PENDING;
					break;
				case 2:
					status = Status.APPROVED;
					break;
				case 3:
					status = Status.DENIED;
					break;
				}
				Type type = null;
				switch(rs.getInt("REIMB_TYPE_ID")) {
				case 1:
					type = Type.LODGING;
					break;
				case 2:
					type = Type.TRAVEL;
					break;
				case 3:
					type = Type.FOOD;
					break;
				case 4:
					type = Type.OTHER;
					break;
				}
				list.add(new Reimbursement(id, amount, submitted, resolved, description, receipt, author, resolver, status, type));
				}
			stmt.close();
		} catch (SQLException e) {
			System.out.println(e);
			LoggerUtil.log.info("SQL Exception in UserDaoImpl");
		}
		
		return list;
	}

	public List<Reimbursement> findByDenied() {
		List<Reimbursement> list = new ArrayList<>();
		
		try (Connection conn = ConnectionUtil.getConnection()) {
			String sql = "SELECT * FROM ERS_REIMBURSEMENTS " + 
				    "JOIN ERS_REIMBURSEMENT_STATUS ERS ON ERS_REIMBURSEMENTS.REIMB_STATUS_ID = ERS.REIMB_STATUS_ID " +
				    "JOIN ERS_REIMBURSEMENT_TYPE ERT ON ERS_REIMBURSEMENTS.REIMB_TYPE_ID = ERT.REIMB_TYPE_ID "
				    + "WHERE REIMB_STATUS = 'DENIED'";;
			
			Statement stmt = conn.createStatement();
			
			ResultSet rs = stmt.executeQuery(sql);
			
			while(rs.next()) {
				int id = rs.getInt("REIMB_ID");
				int amount = rs.getInt("REIMB_AMOUNT");
				String submitted = rs.getTimestamp("REIMB_SUBMITTED").toString();
				String resolved = null;
				rs.getTimestamp("REIMB_RESOLVED");
				if(!rs.wasNull()) {
					resolved = rs.getTimestamp("REIMB_RESOLVED").toString();
				}
				String description = rs.getString("REIMB_DESCRIPTION");
				Blob receipt = rs.getBlob("REIMB_RECEIPT");
				int author = rs.getInt("REIMB_AUTHOR");
				int resolver = rs.getInt("REIMB_RESOLVER");
				Status status = null;
				switch(rs.getInt("REIMB_STATUS_ID")) {
				case 1:
					status = Status.PENDING;
					break;
				case 2:
					status = Status.APPROVED;
					break;
				case 3:
					status = Status.DENIED;
					break;
				}
				Type type = null;
				switch(rs.getInt("REIMB_TYPE_ID")) {
				case 1:
					type = Type.LODGING;
					break;
				case 2:
					type = Type.TRAVEL;
					break;
				case 3:
					type = Type.FOOD;
					break;
				case 4:
					type = Type.OTHER;
					break;
				}
				list.add(new Reimbursement(id, amount, submitted, resolved, description, receipt, author, resolver, status, type));
				}
			stmt.close();
		} catch (SQLException e) {
			System.out.println(e);
			LoggerUtil.log.info("SQL Exception in UserDaoImpl");
		}
		
		return list;
	}

	public List<Reimbursement> findByAuthor(int empid) {
		List<Reimbursement> list = new ArrayList<>();
		
		try (Connection conn = ConnectionUtil.getConnection()) {
			String sql = "SELECT * FROM ERS_REIMBURSEMENTS " + 
				    "JOIN ERS_REIMBURSEMENT_STATUS ERS ON ERS_REIMBURSEMENTS.REIMB_STATUS_ID = ERS.REIMB_STATUS_ID " +
				    "JOIN ERS_REIMBURSEMENT_TYPE ERT ON ERS_REIMBURSEMENTS.REIMB_TYPE_ID = ERT.REIMB_TYPE_ID "
				    + "WHERE REIMB_AUTHOR = ?";
			PreparedStatement stmt = conn.prepareStatement(sql);
		
			stmt.setInt(1, empid);
		
			ResultSet rs = stmt.executeQuery();
			
			while(rs.next()) {
				int id = rs.getInt("REIMB_ID");
				int amount = rs.getInt("REIMB_AMOUNT");
				String submitted = rs.getTimestamp("REIMB_SUBMITTED").toString();
				String resolved = null;
				rs.getTimestamp("REIMB_RESOLVED");
				if(!rs.wasNull()) {
					resolved = rs.getTimestamp("REIMB_RESOLVED").toString();
				}
				String description = rs.getString("REIMB_DESCRIPTION");
				Blob receipt = rs.getBlob("REIMB_RECEIPT");
				int author = rs.getInt("REIMB_AUTHOR");
				int resolver = rs.getInt("REIMB_RESOLVER");
				Status status = null;
				switch(rs.getInt("REIMB_STATUS_ID")) {
				case 1:
					status = Status.PENDING;
					break;
				case 2:
					status = Status.APPROVED;
					break;
				case 3:
					status = Status.DENIED;
					break;
				}
				Type type = null;
				switch(rs.getInt("REIMB_TYPE_ID")) {
				case 1:
					type = Type.LODGING;
					break;
				case 2:
					type = Type.TRAVEL;
					break;
				case 3:
					type = Type.FOOD;
					break;
				case 4:
					type = Type.OTHER;
					break;
				}
				list.add(new Reimbursement(id, amount, submitted, resolved, description, receipt, author, resolver, status, type));
				}
			stmt.close();
		} catch (SQLException e) {
			System.out.println(e);
			LoggerUtil.log.info("SQL Exception in UserDaoImpl");
		}
		
		return list;
	}

	@Override
	public List<Reimbursement> findById(int reimbid){
List<Reimbursement> list = new ArrayList<>();
		
		try (Connection conn = ConnectionUtil.getConnection()) {
			String sql = "SELECT * FROM ERS_REIMBURSEMENTS " + 
				    "JOIN ERS_REIMBURSEMENT_STATUS ERS ON ERS_REIMBURSEMENTS.REIMB_STATUS_ID = ERS.REIMB_STATUS_ID " +
				    "JOIN ERS_REIMBURSEMENT_TYPE ERT ON ERS_REIMBURSEMENTS.REIMB_TYPE_ID = ERT.REIMB_TYPE_ID "
				    + "WHERE REIMB_ID = ?";
			PreparedStatement stmt = conn.prepareStatement(sql);
		
			stmt.setInt(1, reimbid);
		
			ResultSet rs = stmt.executeQuery();
			
			while(rs.next()) {
				int id = rs.getInt("REIMB_ID");
				int amount = rs.getInt("REIMB_AMOUNT");
				String submitted = rs.getTimestamp("REIMB_SUBMITTED").toString();
				String resolved = null;
				rs.getTimestamp("REIMB_RESOLVED");
				if(!rs.wasNull()) {
					resolved = rs.getTimestamp("REIMB_RESOLVED").toString();
				}
				String description = rs.getString("REIMB_DESCRIPTION");
				Blob receipt = rs.getBlob("REIMB_RECEIPT");
				int author = rs.getInt("REIMB_AUTHOR");
				int resolver = rs.getInt("REIMB_RESOLVER");
				Status status = Status.valueOf(rs.getString("REIMB_STATUS"));
				Type type = Type.valueOf(rs.getString("REIMB_TYPE"));
				
				list.add(new Reimbursement(id, amount, submitted, resolved, description, receipt, author, resolver, status, type));
			}
		stmt.close();
			
		} catch (SQLException e) {
			System.out.println(e);
			LoggerUtil.log.info("SQL Exception ReimbursementDaoImpl");
		}
		System.out.println(list.toString());
		return list;
	}
	public boolean insert(Reimbursement reimb) {
		try (Connection conn = ConnectionUtil.getConnection()) {
			String sql = "{ call insert_into_reimb(?, ?, ?, ?, ?, ?, ?, ?) }";
			
			CallableStatement stmt = conn.prepareCall(sql);
			
			stmt.setInt(1, reimb.getAmount());
			stmt.setTimestamp(2, Timestamp.valueOf(LocalDateTime.now()));
			stmt.setString(3, reimb.getDescription());
			Blob blob = conn.createBlob();
            if (reimb.getReceipt() != null) {
                blob.setBytes(1, reimb.getReceipt().getBytes());
                stmt.setBlob(3, blob);
            } else stmt.setNull(3, Types.BLOB);
            stmt.setBlob(3, blob);
			stmt.setInt(5,  reimb.getAuthor());
			stmt.setInt(6,  reimb.getResolver());
			stmt.setInt(7,  1);
			switch (reimb.getType()) {
			case LODGING:
				stmt.setInt(8,  1);
				break;
			case TRAVEL:
				stmt.setInt(8,  2);
				break;
			case FOOD:
				stmt.setInt(8,  3);
				break;
			default:
				stmt.setInt(8,  4);
			}
			stmt.execute();
			stmt.close();
			return true;
		} catch (SQLException e) {
			System.out.println(e);
			LoggerUtil.log.info("SQL Exception in ReimbursementDaoImpl: insert");
			return false;
		}
	}

	public boolean update(Reimbursement reimb) {
	try (Connection conn = ConnectionUtil.getConnection()) {
		String sql = "UPDATE ERS_REIMBURSEMENTS SET REIMB_AMOUNT = ?, REIMB_RESOLVED = ?, REIMB_DESCRIPTION = ?, REIMB_RECEIPT = ?, REIMB_AUTHOR = ?, REIMB_RESOLVER = ?, REIMB_STATUS_ID = ?, REIMB_TYPE_ID = ? WHERE REIMB_ID = " + reimb.getId();
		System.out.println("updating!");
		PreparedStatement stmt = conn.prepareStatement(sql);
		
		stmt.setInt(1, reimb.getAmount());
		stmt.setTimestamp(2, Timestamp.valueOf(LocalDateTime.now()));
		stmt.setString(3, reimb.getDescription());
		stmt.setBlob(4,  reimb.getReceipt());
		stmt.setInt(5,  reimb.getAuthor());
		stmt.setInt(6,  reimb.getResolver());
		switch (reimb.getStatus()) {
		case PENDING:
			stmt.setInt(7, 1);
			break;
		case APPROVED:
			stmt.setInt(7, 2);
			break;
		case DENIED:
			stmt.setInt(7, 3);
			break;
		}
		switch (reimb.getType()) {
		case LODGING:
			stmt.setInt(8,  1);
			break;
		case TRAVEL:
			stmt.setInt(8,  2);
			break;
		case FOOD:
			stmt.setInt(8,  3);
			break;
		default:
			stmt.setInt(8,  4);
		}
		stmt.execute();
		stmt.close();
		return true;
	} catch (SQLException e) {
		System.out.println(e);
		LoggerUtil.log.info("SQL Exception in ReimbursementDaoImpl: update");
		return false;
	}
	}

}
